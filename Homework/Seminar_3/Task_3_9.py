'''
Задача 1 Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами.
результирующем списке не должно быть дубликатов.
'''


print("Задача 1")

my_list = [1, 2, 3, 1, 2, 3, 5, 'a', (6, 5), 'b', (6, 5)]

my_set = set()

for item in my_list:
    if my_list.count(item) > 1:
        my_set.add(item)
print("Исходный список", my_list)
print("Результирующий список", list(my_set))


input('')



'''
Задача 2 В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии или из документации к языку.
'''


print("Задача 2")

text = "'Война и мир', 1863 год"\
        "На краю дороги стоял дуб. Вероятно, в десять раз старше берёз, составлявших лес, он был в десять раз толще и в два раза выше каждой берёзы. " \
       "Это был огромный в два обхвата дуб с обломанными, давно видно, суками и с обломанной корой, заросшей старыми болячками. " \
       "С огромными своими неуклюжими, несимметрично - растопыренными, корявыми руками и пальцами, он старым, сердитым и презрительным уродом стоял между " \
       "улыбающимися берёзами. Только он один не хотел подчиняться обаянию весны и не хотел видеть ни весны, ни солнца.«Весна, и любовь, и счастие!» – " \
       "как будто говорил этот дуб, – «и как не надоест вам всё один и тот же глупый и бессмысленный обман. Всё одно и то же, и всё обман! Нет ни весны, " \
       "ни солнца, ни счастия. Вон смотрите, сидят задавленные мёртвые ели, всегда одинакие, и вон и я растопырил свои обломанные, ободранные пальцы, где " \
       "ни выросли они – из спины, из боков; как выросли – так и стою, и не верю вашим надеждам и обманам».Князь Андрей несколько раз оглянулся на этот дуб, " \
       "проезжая по лесу, как будто он чего-то ждал от него. Цветы и трава были и под дубом, но он всё так же, хмурясь, неподвижно, уродливо и упорно, стоял " \
       "посреди их. «Да, он прав, тысячу раз прав этот дуб, думал князь Андрей, пускай другие, молодые, вновь поддаются на этот обман, а мы знаем жизнь, – " \
       "наша жизнь кончена!» Целый новый ряд мыслей безнадёжных, но грустно-приятных в связи с этим дубом, возник в душе князя Андрея." \
       "Во время этого путешествия он как будто вновь обдумал всю свою жизнь, и пришёл к тому же прежнему успокоительному и безнадёжному заключению, что " \
       "ему начинать ничего было не надо, что он должен доживать свою жизнь, не делая зла, не тревожась и ничего не желая. "

my_dict = {}
text_list = text.lower().split()
text_list_new = [''.join(filter(str.isalpha, a)) for a in text_list]    # убираем все ненужное: символы, цифры, оставляя только слова

while '' in text_list_new:
    text_list_new.remove('')

for word in text_list_new:
    my_dict.setdefault(word, text_list_new.count(word))

num_words = 1
while num_words <= 10:
    num_words += 1
    max_key = max(my_dict,  key=my_dict.get)
    print(f'{max_key:>5}  =  {my_dict[max_key]}')
    my_dict.pop(max_key)

input('')


'''
Задача 3 Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. Достаточно вернуть один допустимый вариант.
*Верните все возможные варианты комплектации рюкзака.
'''

print("Задача 3")
# вариант комплектации рбкзака по максимально возможной грузоподдьемности
from operator import itemgetter

my_diction = {'рюкзак': 2, 'котелок': 1, 'палатка': 7, 'байдарка': 15, 'шатер': 12, 'мангал': 2, 'спорт инвертарь': 6}
max_capacity_backpack = 20
weight = 0
capacity_backpack = 0
print("рюкзак: ", my_diction)
print("список вещей по максимально возможной грузоподьемности рюкзака в ", max_capacity_backpack, "кг")
for things, value in dict(sorted(my_diction.items(), key=itemgetter(1))).items():
    weight += my_diction[things]

    if weight <= max_capacity_backpack:
        print(things, ' = ', value)
        capacity_backpack += my_diction[things]

print("общий вес рюкзака c вещами: ", capacity_backpack)

# 2 вариант использование всех возможных вариантов комплектации рюкзака

input('')

print("Задача 3*")

print("Все возможные варианты наполнгения рюкзака при допустимой грузоподьемности в ", max_capacity_backpack, "кг")

list_dict_value = []
list_dict_key = []
for key, value in my_diction.items():
    list_dict_key.append(key)
    list_dict_value.append(value)

def subset_sum(weights, things, target, count, partial_weights=[], partial_things=[]):
    s = sum(partial_weights)

    # check if the partial sum is equals to target
    if s <= target:
        print("список вещей(%s)\nвес вещей(%s) <= %s \n" % (partial_things, partial_weights, target))

    if s >= target:
        return  # if we reach the number why bother to continue

    for i in range(len(weights)):
        n = weights[i]
        remaining_weights = weights[i + 1:]
        m = things[i]
        remaining_things = things[i + 1:]
        subset_sum(remaining_weights, remaining_things, target, count + 1, partial_weights + [n], partial_things + [m])

print(subset_sum(list_dict_value, list_dict_key, max_capacity_backpack, 0))